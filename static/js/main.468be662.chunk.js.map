{"version":3,"sources":["lib/nft.ts","lib/metadata.ts","lib/ipfs.ts","lib/config.ts","MediaDisplay.tsx","Picker.tsx","Uploader.tsx","Minter.tsx","EventMints.tsx","AlgorandWalletConnector.tsx","App.tsx","index.tsx","lib/algorand.ts"],"names":["ARC3_URL_SUFFIX","METADATA_FILE","JSON_TYPE","ipfsURL","cid","resolveProtocol","activeConf","url","endsWith","slice","length","chunks","split","conf","ipfsGateway","mediaIntegrity","file","a","arrayBuffer","buff","bytes","Uint8Array","hash","sha256","digest","Buffer","from","toString","Token","t","id","name","unitName","metadataHash","total","decimals","creator","manager","reserve","clawback","freeze","defaultFrozen","this","p","params","index","NFT","md","token","urlMimeType","metadata","Metadata","valid","mediaURL","substring","wallet","createToken","asset_id","fromAssetId","assetId","getToken","fromToken","fromParams","getMimeTypeFromIpfs","getMetaFromIpfs","getTypeFromMimeType","filetype","type","omitRawAndEmpty","k","v","args","_raw","undefined","description","image","image_integrity","image_mimetype","background_color","external_url","external_url_integrity","external_url_mimetype","animation_url","animation_url_integrity","animation_url_mimetype","extra_metadata","localization","properties","Object","assign","fmt","hasOwnProperty","create","update","md_blob","Blob","File","title","JSON","stringify","parse","mimeType","storageClient","getStorageClient","Web3Storage","endpoint","putToIPFS","storage","put","wrapWithDirectory","mediaAdded","integ","mdc","mediaType","mdobj","toFile","listRecentFiles","ms_threshold","w3s","options","list","maxResults","upload","push","getIpfsUrlFromCID","req","Request","method","fetch","resp","headers","get","blob","body","text","parsed","console","error","require","eventConfs","activeConfKey","sessionGetActiveConf","ac","sessionStorage","getItem","parseInt","getEventConfig","ec","event","MediaDisplay","props","media","controls","src","mediaSrc","alt","className","MAX_DELTA","Picker","React","useState","setOptions","initialized","setInitialized","activeConfig","opts","mime_type_promises","opt","Promise","all","idx","mimeTypes","new_opts","md_promises","metas","filtered","useEffect","getRecentFiles","then","cards","map","option","DisplayCard","cidmd","to","elevation","Elevation","TWO","Uploader","meta","setMeta","setTitle","loading","setLoading","fileObj","setFileObj","setMediaSrc","setMimeType","window","location","reload","alert","UploadContainer","mediaTitle","setFile","reader","FileReader","onload","e","target","result","readAsDataURL","metaObj","size","intent","style","float","margin","onClick","large","disabled","onInputChange","stopPropagation","preventDefault","files","item","Minter","useParams","setMd","importingAccount","setImportingAccount","nft","setNFT","fundLoading","setFundLoading","popupOpen","setPopupOpen","createdId","setCreatedId","sw","addr","xferAsset","acct","algosdk","generateAccount","fundAccount","href","NFTCard","mintOnly","mintAndCreate","AccountImporter","cancelCreate","continueCreate","AddressReader","optIn","handleScanned","isOpen","DIALOG_BODY","THREE","icon","setIsOpen","mn","setMn","ic","secretKeyToMnemonic","sk","value","DIALOG_FOOTER","vref","useRef","scanner","setScanner","open","stop","start","seen","onOpened","current","QrScanner","data","width","ref","WORKER_PATH","EventMints","nfts","setNfts","loadedName","setLoadedName","nftPromises","asaList","asa","n","nftList","AlgorandWalletConnector","selectorOpen","setSelectorOpen","sessionWallet","updateWallet","handleSelectedWallet","choice","currentTarget","allowedWallets","disconnect","SessionWallet","network","permissionCallback","connect","interval","connected","success","setInterval","clearInterval","walletOptions","entries","fill","minimal","outlined","img","darkMode","displayName","rightIcon","onClose","Classes","addr_list","accts","substr","onChange","setAccountIndex","iconProps","defaultValue","accountIndex","App","setSessionWallet","accountList","setAccounts","setConnected","events","Group","align","Alignment","LEFT","Heading","Divider","RIGHT","path","element","history","createBrowserHistory","ReactDOM","render","StrictMode","document","getElementById","getClient","Algodv2","algod","getDefaultAccount","getSuggested","suggested","create_txn","makeAssetCreateTxnWithSuggestedParamsFromObject","assetName","assetURL","assetMetadataHash","toHash","suggestedParams","signTxn","create_txn_s","sendWait","fund_txn","makePaymentTxnWithSuggestedParamsFromObject","amount","optin_txn","makeAssetTransferTxnWithSuggestedParamsFromObject","assetIndex","xfer_txn","grouped","assignGroupID","fund_txn_s","xfer_txn_s","optin_txn_s","signTransaction","rx","rounds","getTransactionParams","do","txParams","lastRound","getAssetByID","signed","client","sendRawTransaction","txId","waitForConfirmation"],"mappings":"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","file":"static/js/main.468be662.chunk.js","sourcesContent":["import { createToken, getToken } from \"./algorand\";\nimport { getMimeTypeFromIpfs, getMetaFromIpfs } from \"./ipfs\";\nimport { sha256 } from \"js-sha256\";\nimport { Wallet } from \"algorand-session-wallet\";\nimport { conf } from \"./config\";\nimport { Metadata } from \"./metadata\";\n\n/*\n\nThe following is a class and metadata type to support the ARC-0003 standard \nset forth by the Algorand Foundation and Community\n\nhttps://github.com/algorandfoundation/ARCs/blob/main/ARCs/arc-0003.md\n\n*/\n\nexport const ARC3_NAME_SUFFIX = \"@arc3\";\nexport const ARC3_URL_SUFFIX = \"#arc3\";\nexport const METADATA_FILE = \"metadata.json\";\nexport const JSON_TYPE = \"application/json\";\n\nexport function asaURL(cid: string): string {\n  return ipfsURL(cid) + ARC3_URL_SUFFIX;\n}\nexport function ipfsURL(cid: string): string {\n  return \"ipfs://\" + cid;\n}\nexport function fileURL(activeConf: number, cid: string, name: string): string {\n  return conf[activeConf].ipfsGateway + cid + \"/\" + name;\n}\n\nexport function resolveProtocol(activeConf: number, url: string): string {\n  if (url.endsWith(ARC3_URL_SUFFIX))\n    url = url.slice(0, url.length - ARC3_URL_SUFFIX.length);\n\n  const chunks = url.split(\"://\");\n\n  // No protocol specified, give up\n  if (chunks.length < 2) return url;\n\n  //Switch on the protocol\n  switch (chunks[0]) {\n    case \"ipfs\": //Its ipfs, use the configured gateway\n      return conf[activeConf].ipfsGateway + chunks[1];\n    case \"https\": //Its already http, just return it\n      return url;\n    // TODO: Future options may include arweave or algorand\n  }\n\n  return url;\n}\n\nexport async function mediaIntegrity(file: File): Promise<string> {\n  const buff = await file.arrayBuffer();\n  const bytes = new Uint8Array(buff);\n  const hash = new Uint8Array(sha256.digest(bytes));\n  return \"sha256-\" + Buffer.from(hash).toString(\"base64\");\n}\n\nexport class Token {\n  id: number;\n\n  name: string;\n  unitName: string;\n  url: string;\n\n  metadataHash: string;\n\n  total: number;\n  decimals: number;\n\n  creator: string;\n\n  manager: string;\n  reserve: string;\n  clawback: string;\n  freeze: string;\n\n  defaultFrozen: boolean;\n\n  constructor(t: any) {\n    this.id = t.id || 0;\n    this.name = t.name || \"\";\n    this.unitName = t.unitName || \"\";\n    this.url = t.url || \"\";\n\n    this.metadataHash = t.metadataHash || \"\";\n\n    this.total = t.total || 0;\n    this.decimals = t.decimals || 0;\n\n    this.creator = t.creator || \"\";\n\n    this.manager = t.manager || \"\";\n    this.reserve = t.reserve || \"\";\n    this.clawback = t.clawback || \"\";\n    this.freeze = t.freeze || \"\";\n\n    this.defaultFrozen = t.defaultFrozen || false;\n  }\n\n  static fromParams(t: any): Token {\n    const p = t.params;\n    return new Token({\n      id: t.index,\n      name: p.name || \"\",\n      unitName: p[\"unit-name\"] || \"\",\n      url: p.url || \"\",\n      metadataHash: p[\"metadata-hash\"] || \"\",\n      total: p.total || 0,\n      decimals: p.decimals || 0,\n      creator: p.creator || \"\",\n      manager: p.manager || \"\",\n      reserve: p.reserve || \"\",\n      clawback: p.clawback || \"\",\n      freeze: p.freeze || \"\",\n      defaultFrozen: p[\"default-frozen\"] || false,\n    }) as Token;\n  }\n\n  valid(): boolean {\n    return this.id > 0 && this.total > 0 && this.url !== \"\";\n  }\n}\n\nexport class NFT {\n  token: Token = new Token({});\n  metadata: Metadata = new Metadata();\n\n  urlMimeType: string;\n\n  constructor(md: Metadata, token?: Token, urlMimeType?: string) {\n    this.metadata = md;\n    this.token = token;\n    this.urlMimeType = urlMimeType;\n  }\n\n  static async create(\n    wallet: Wallet,\n    activeConf: number,\n    md: Metadata,\n    cid: string\n  ): Promise<NFT> {\n    const asset_id = await createToken(wallet, activeConf, ipfsURL(cid), md);\n    return await NFT.fromAssetId(activeConf, asset_id);\n  }\n\n  static async fromAssetId(activeConf: number, assetId: number): Promise<NFT> {\n    return NFT.fromToken(activeConf, await getToken(activeConf, assetId));\n  }\n\n  static async fromToken(activeConf: number, t: any): Promise<NFT> {\n    const token = Token.fromParams(t);\n    const url = resolveProtocol(activeConf, token.url);\n\n    //TODO: provide getters for other storage options\n    // arweave? note field?\n\n    try {\n      const urlMimeType = await getMimeTypeFromIpfs(url);\n\n      switch (urlMimeType) {\n        case JSON_TYPE:\n          return new NFT(await getMetaFromIpfs(url), token, urlMimeType);\n      }\n\n      return new NFT(Metadata.fromToken(token), token, urlMimeType);\n    } catch (error) {\n      return new NFT(new Metadata(), token);\n    }\n  }\n\n  valid(): boolean {\n    return this.token.valid() && this.metadata.valid();\n  }\n\n  name(): string {\n    if (this.metadata.valid()) {\n      return this.metadata.name;\n    }\n    if (this.token.valid()) {\n      return this.token.name;\n    }\n    return \"\";\n  }\n\n  id(): number {\n    return this.token.valid() ? this.token.id : 0;\n  }\n\n  mediaURL(activeConf: number): string {\n    if (!this.valid()) return \"https://dummyimage.com/640x360/fff/aaa\";\n\n    // Try to resolve the protocol, if one is set\n    const url = resolveProtocol(activeConf, this.metadata.mediaURL());\n\n    // If the url is different, we resolved it correctly\n    if (url !== this.metadata.mediaURL()) return url;\n\n    // It may be a relative url stored within the same directory as the metadata file\n    // Lop off the METADATA_FILE bit and append image path\n    if (this.token.url.endsWith(METADATA_FILE)) {\n      const dir = this.token.url.substring(\n        0,\n        this.token.url.length - METADATA_FILE.length\n      );\n      return resolveProtocol(activeConf, dir) + this.metadata.mediaURL();\n    }\n\n    // give up\n    return url;\n  }\n}\n","import {Token, JSON_TYPE, METADATA_FILE} from './nft'\nimport { sha256 } from 'js-sha256'\n\nexport type Properties = {\n    [key: string]: string | number\n}\n\nexport type LocalizationIntegrity = {\n    [key: string]: string \n}\n\nexport type Localization = {\n    uri: string \n    default: string \n    locales: string[] \n    integrity?: LocalizationIntegrity\n}\n\n// Just takes the first chunk of the mimetype (the type)\nexport function getTypeFromMimeType(filetype: string): string {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [type, _] = filetype.split(\"/\")\n    return type\n}\n\nfunction omitRawAndEmpty(k,v){\n    if(k === \"_raw\") return undefined;\n    if(v === \"\") return undefined;\n    return v\n}\n\nexport class Metadata {\n    _raw: string = undefined\n\n    name: string = \"\"\n    description: string = \"\"\n\n    image: string = \"\"\n    decimals?: number = 0\n    unitName?: string = \"\"\n    image_integrity?: string = \"\"\n    image_mimetype?: string = \"\"\n\n    background_color?: string = \"\"\n    external_url?: string = \"\"\n    external_url_integrity?: string = \"\"\n    external_url_mimetype?: string = \"\"\n\n    animation_url?: string = \"\"\n    animation_url_integrity?: string = \"\"\n    animation_url_mimetype?: string = \"\"\n\n    extra_metadata?: string = \"\"\n\n    localization?: Localization\n\n    properties?: Properties\n\n    constructor(args: any = {}) { Object.assign(this, args) }\n\n    toHash(fmt: Boolean = false): Uint8Array {\n        if(this.hasOwnProperty(\"extra_metadata\")){\n            //TODO\n            //am = SHA-512/256(\"arc0003/am\" || SHA-512/256(\"arc0003/amj\" || content of JSON metadata file) || e)\n        }\n\n        if(this._raw === undefined) \n            this._raw = this.toString(false)\n\n        const hash = sha256.create();\n        fmt ? hash.update(this.toString(false)):hash.update(this._raw);\n        return new Uint8Array(hash.digest())\n    }\n\n    valid(): boolean {\n        return this.image !== \"\"\n    }\n\n    toFile(): File {\n        const md_blob = new Blob([this.toString()], { type: JSON_TYPE })\n        return new File([md_blob], METADATA_FILE)\n    }\n\n    title(): string {\n        if(this.properties !== undefined && 'title' in this.properties) return this.properties.title.toString()\n        return this.name\n    }\n\n    toString(fmt: Boolean = false): string {\n        if(this._raw === undefined) this._raw = JSON.stringify({...this}, omitRawAndEmpty)\n        return JSON.stringify(JSON.parse(this._raw) , omitRawAndEmpty, fmt?2:0)\n    }\n\n\n    mimeType(): string {\n        if(this.animation_url !== \"\") return this.animation_url_mimetype;\n        if(this.external_url_mimetype !== \"\") return this.external_url_mimetype;\n        return this.image_mimetype\n    }\n\n    mediaType(): string {\n        return getTypeFromMimeType(this.mimeType())\n    }\n\n    mediaURL(): string {\n        if(this.animation_url !== \"\") {\n            return this.animation_url\n        }\n        return this.image\n    }\n\n\n    static fromToken(t: Token){\n        return new Metadata({name:t.name, image: t.url, decimals: t.decimals })\n    }\n}\n","import { ipfsURL, mediaIntegrity } from './nft'\nimport {Metadata} from './metadata'\nimport {conf} from './config'\n\n/*\n Currently an issue with resolving ipfs-car module in web3.storage when using react-scripts\n We just use the prebuilt one but with no types we have to just ignore the issue for now\n//import { Web3Storage } from 'web3.storage'\n*/\n// @ts-ignore\nimport { Web3Storage } from 'web3.storage/dist/bundle.esm.min.js'\n\n\nlet storageClient = undefined\nfunction getStorageClient(activeConf: number): Web3Storage {\n    if(storageClient === undefined){\n        storageClient = new Web3Storage({ token: \" \", endpoint:\"https://worker.barnji.workers.dev\" })\n    }\n    return storageClient\n}\n\nexport async function putToIPFS(activeConf: number, file: File, md: Metadata): Promise<string> {\n    const storage = getStorageClient(activeConf) \n    const mediaAdded = await storage.put([file], {wrapWithDirectory: false})\n\n    const integ = await mediaIntegrity(file)\n\n    const mdc = {...md}\n    switch(md.mediaType()){\n        case 'image':\n            mdc.image = ipfsURL(mediaAdded)\n            mdc.image_integrity = integ\n            break\n        case 'audio':\n            mdc.animation_url = ipfsURL(mediaAdded)\n            mdc.animation_url_integrity = integ\n            break\n        case 'video':\n            mdc.animation_url = ipfsURL(mediaAdded)\n            mdc.animation_url_integrity = integ\n            break\n    }\n\n    const mdobj = new Metadata(mdc)\n\n    return await storage.put([mdobj.toFile()], {wrapWithDirectory: false})\n}\n\nexport async function listRecentFiles( activeConf: number, ms_threshold: number): Promise<any[]> {\n    const w3s = getStorageClient(activeConf)\n    const options = []\n    for await (const upload of w3s.list({maxResults:20})) {\n        options.push(upload)\n    }\n    return options\n}\n\nexport function getIpfsUrlFromCID(activeConf:number, cid: string): string {\n    return conf[activeConf].ipfsGateway + cid\n}\n\nexport async function getMimeTypeFromIpfs(url: string): Promise<string> {\n    const req = new Request(url, { method:\"HEAD\" })\n    const resp = await fetch(req)\n    return resp.headers.get(\"Content-Type\")\n}\n\n\nexport async function getMetaFromIpfs(url: string): Promise<Metadata> {\n    try {\n        const req = new Request(url)\n        const resp = await fetch(req)\n        const body = await resp.blob()\n        const text = await body.text()\n        const parsed = JSON.parse(text)\n        return new Metadata({\"_raw\":text, ...parsed}) \n    } catch (e){\n        console.error(e)\n    }\n\n    return new Metadata({})\n}","type Config = {\n    network: string;       // The network to use for creating nfts\n    storageToken: string;  // The token provided by web3.storage\n    ipfsGateway: string;   // The IPFS gateway url for retrieving files\n    algod: string          // The Algod api url to use\n    blockExplorer: string; // The Block Explorer to allow linking out to\n}\n\ntype EventConfig = {\n    creator: string;\n    event: string;\n    title: string;\n    date: string;\n    asaList: number[];\n};\n\n\nexport const conf = require(\"../config.json\") as Config[];\nexport const eventConfs = require(\"../event_config.json\") as EventConfig[];\n\nexport function getAddrUrl(idx: number, addr: string): string {\n    return conf[idx].blockExplorer + \"address/\" + addr\n}\nexport function getAsaUrl(idx: number, id: number): string {\n    return conf[idx].blockExplorer + \"asset/\" + id \n}\n\nconst activeConfKey = \"active-conf\"\nexport function sessionGetActiveConf(): number {\n    const ac = sessionStorage.getItem(activeConfKey)\n    if(ac === undefined || ac === null) return 0\n    return parseInt(ac)\n}\n\nexport function sessionSetActiveConf(ac: number)  {\n    sessionStorage.setItem(activeConfKey, ac.toString())\n}\n\nexport function getEventConfig(name: string): EventConfig {\n    for(const ec of eventConfs){\n        if (ec.event === name) return ec;\n    }\n    return undefined;\n}","import { getTypeFromMimeType } from \"./lib/metadata\"\n\ntype MediaDisplayProps = {\n    name: string\n    title: string\n    mimeType: string\n    mediaSrc: string | undefined\n}\n\nexport function MediaDisplay(props: MediaDisplayProps){\n    const type = getTypeFromMimeType(props.mimeType)\n\n    let media = <div></div>\n    switch(type) {\n        case \"audio\":\n           media = (\n                <audio id=\"uploaded-media\" controls >\n                    <source src={props.mediaSrc} type={props.mimeType} />\n                </audio>\n            )\n            break;\n        case \"video\":\n            media = (\n                <video id=\"uploaded-media\" controls>\n                    <source src={props.mediaSrc} type={props.mimeType} />\n                </video>\n            )\n            break;\n        default:\n            media = (\n                <img id=\"uploaded-media\" alt=\"NFT\" src={props.mediaSrc} />\n            )\n    }\n\n    return (\n        <div className='media-display container'>\n\n            <h3>{props.title}</h3>\n            <h5>{props.name}</h5>\n\n            <div className='content' > \n                {media}\n            </div>\n        </div>\n    )\n}","import { Card, Elevation } from \"@blueprintjs/core\";\n\nimport { Link } from 'react-router-dom'\nimport React from \"react\";\nimport { Metadata } from \"./lib/metadata\";\nimport { resolveProtocol } from \"./lib/nft\";\nimport {\n  getIpfsUrlFromCID,\n  getMetaFromIpfs,\n  getMimeTypeFromIpfs,\n  listRecentFiles,\n} from \"./lib/ipfs\";\nimport { SessionWallet } from \"algorand-session-wallet\";\nimport { MediaDisplay } from \"./MediaDisplay\";\n\ntype PickerProps = {\n  activeConfig: number;\n  sw: SessionWallet\n};\n\n// 2 hours\nconst MAX_DELTA = 60 * 60 * 4 * 1000;\n\n\nexport default function Picker(props: PickerProps) {\n  const [options, setOptions] = React.useState([]);\n  const [initialized, setInitialized] = React.useState(false);\n\n\n  async function getRecentFiles(activeConfig: number): Promise<CIDMD[]> {\n    const opts = await listRecentFiles(activeConfig, MAX_DELTA)\n\n    const mime_type_promises = []\n    for (const opt of opts) {\n      mime_type_promises.push(getMimeTypeFromIpfs(getIpfsUrlFromCID(props.activeConfig, opt.cid)))\n    }\n\n    const mimeTypes = await Promise.all(mime_type_promises)\n\n    const new_opts = []\n    const md_promises = [];\n    for (const idx in opts) {\n      if (mimeTypes[idx] === \"application/json\"){\n        md_promises.push(\n          getMetaFromIpfs(getIpfsUrlFromCID(props.activeConfig, opts[idx].cid))\n        );\n        new_opts.push(opts[idx])\n\n      }\n    }\n\n    const metas = await Promise.all(md_promises)\n    const filtered = [];\n    for (const idx in metas) {\n      if (metas[idx].name === \"\") continue;\n\n      filtered.push({\n        cid: new_opts[idx].cid,\n        md: metas[idx]\n      } as CIDMD);\n    }\n\n    return filtered\n  }\n\n  // Look at recent\n  React.useEffect(() => {\n    if (initialized) return;\n    getRecentFiles(props.activeConfig).then((filtered) => {\n      setOptions(filtered);\n      setInitialized(true);\n    })\n  }, [props.activeConfig, initialized]);\n\n  const cards = initialized ? options.map((option) => {\n    return <DisplayCard key={option.cid} cidmd={option} />;\n  }) : [<h5 key='loading'>Loading...</h5>];\n\n  return (\n    <div className=\"container\">\n      <div className=\"content content-collection\">\n        {cards}\n      </div>\n    </div>\n  );\n}\n\ntype CIDMD = {\n  cid: string\n  md: Metadata\n}\n\ntype DisplayCardProps = {\n  cidmd: CIDMD;\n};\n\nfunction DisplayCard(props: DisplayCardProps) {\n  return (\n\n    <Link to={'/mint/' + props.cidmd.cid}>\n      <Card\n        className=\"content-collection-item\"\n        elevation={Elevation.TWO}\n      >\n        <MediaDisplay\n          name={props.cidmd.md.name}\n          title={props.cidmd.md.title()}\n          mediaSrc={resolveProtocol(0, props.cidmd.md.mediaURL())}\n          mimeType={props.cidmd.md.mimeType()}\n        />\n      </Card>\n    </Link>\n  );\n}\n","import React from 'react'\nimport { Button, Elevation, FileInput, Card} from \"@blueprintjs/core\"\nimport { getTypeFromMimeType, Metadata} from './lib/metadata'\nimport { putToIPFS } from './lib/ipfs'\nimport { MediaDisplay } from './MediaDisplay'\n\ntype UploaderProps = {\n    activeConfig: number\n}\n\nexport function Uploader(props: UploaderProps) {\n\n    const [meta, setMeta]               = React.useState(new Metadata())\n    const [title, setTitle]             = React.useState<string>();\n    const [loading, setLoading]         = React.useState(false)\n    const [fileObj, setFileObj]         = React.useState<File>();\n    const [mediaSrc, setMediaSrc]       = React.useState<string>();\n    const [mimeType, setMimeType]       = React.useState<string>();\n\n    function setFile(file: File) {\n        setFileObj(file)\n\n        const reader = new FileReader();\n        reader.onload = (e: any) => {  setMediaSrc(e.target.result) }\n        reader.readAsDataURL(file);\n\n        setMimeType(file.type)\n        setTitle(file.name)\n\n        setMeta((meta)=>{\n            const metaObj = {\n                ...meta,\n                properties:{...meta.properties, size:file.size, title:file.name}\n            }\n\n            const mediaType = getTypeFromMimeType(file.type)\n            switch(mediaType){\n                case 'audio':\n                    metaObj.animation_url = file.name\n                    metaObj.animation_url_mimetype = file.type\n                    break;\n                case 'video':\n                    metaObj.animation_url = file.name\n                    metaObj.animation_url_mimetype = file.type\n                    break;\n                case 'image':\n                    metaObj.image = file.name\n                    metaObj.image_mimetype = file.type\n                    break;\n            }\n\n            return new Metadata(metaObj)\n        })\n    }\n\n    async function uploadMedia() {\n        setLoading(true) \n\n        const md = new Metadata({\n            ...meta,\n            name: \"LaBitConf ALGO POAP\",\n            unitName:\"bitconf\",\n            description:\"POAP Minted at LABITCONF 2022\",\n            decimals: 0,\n        }) \n        setMeta(md)\n\n        try {\n            await putToIPFS(props.activeConfig, fileObj, md)\n            setLoading(false)\n            window.location.reload()\n        } catch (error) {\n            console.error(error)\n            alert(\"Failed to upload image to ipfs :(\")\n            setLoading(false)\n            return\n        }\n    }\n\n    return (\n        <div className='container'>\n            <Card elevation={Elevation.TWO} className='mint-card' >\n                <UploadContainer mediaTitle={title} mimeType={mimeType} mediaSrc={mediaSrc} setFile={setFile} {...meta} />\n                <Button intent='success' style={{float:'right', margin:\"15px\"}} loading={loading} onClick={uploadMedia}>Upload</Button>\n            </Card>\n        </div>\n    )\n\n}\n\ntype UploaderContainerProps = {\n    mediaTitle: string | undefined\n    mediaSrc: string | undefined\n    mimeType: string | undefined\n    setFile(f: File): void\n};\n\nfunction UploadContainer(props: UploaderContainerProps) {\n    function captureFile(event: any) {\n        event.stopPropagation()\n        event.preventDefault()\n        props.setFile(event.target.files.item(0))\n    }\n\n    if (props.mediaSrc === undefined || props.mediaSrc === \"\" ) return (\n        <div className='container'>\n            <div className='content content-piece' >\n                <FileInput large={true} disabled={false} text=\"Choose file...\" onInputChange={captureFile} />\n            </div>\n        </div>\n    )\n\n    return (\n        <div className='container' >\n            <div className='content content-piece'>\n                <MediaDisplay name={\"\"} title={props.mediaTitle} mimeType={props.mimeType} mediaSrc={props.mediaSrc} />\n            </div>\n        </div>\n    )\n}","import { SessionWallet } from 'algorand-session-wallet'\nimport QrScanner from \"qr-scanner\";\nimport {useParams} from 'react-router-dom'\nimport React from 'react'\nimport { NFT, resolveProtocol} from './lib/nft'\nimport { Metadata } from './lib/metadata'\nimport { getIpfsUrlFromCID, getMetaFromIpfs } from './lib/ipfs'\nimport {fundAccount, xferAsset} from './lib/algorand'\nimport { Button, Card, Dialog, Elevation } from '@blueprintjs/core'\nimport QRCode from \"react-qr-code\";\nimport algosdk, {secretKeyToMnemonic } from 'algosdk'\nimport { DIALOG_BODY, DIALOG_FOOTER } from '@blueprintjs/core/lib/esm/common/classes'\nimport { MediaDisplay } from './MediaDisplay';\n\nQrScanner.WORKER_PATH = \"/qr-scanner-worker.min.js\"\n\nexport type MinterProps = {\n    activeConfig: number \n    sw: SessionWallet\n}\n\nexport function Minter(props: MinterProps){\n    // Mint the chosen nft image with our minting account\n    const {cid} = useParams()\n    const [md, setMd] = React.useState(new Metadata({}))\n    const [importingAccount, setImportingAccount] = React.useState(undefined)\n    const [nft, setNFT] = React.useState(undefined)\n    const [fundLoading, setFundLoading] = React.useState(false)\n    const [loading, setLoading] = React.useState(false)\n    const [popupOpen,setPopupOpen] = React.useState(false)\n\n    const [createdId, setCreatedId] = React.useState(0)\n\n    React.useEffect(()=>{\n        if(md._raw === undefined)\n            getMetaFromIpfs(getIpfsUrlFromCID(props.activeConfig, cid)).then((md)=>{\n                setMd(md)\n            })\n    }, [props.activeConfig, cid, md])\n\n    async function mintOnly(){\n        // Create ASA with our user\n        setLoading(true)\n        const result = await NFT.create(props.sw.wallet, props.activeConfig,  md, cid)\n        setNFT(result)\n        setCreatedId(result.id())\n    }\n\n    async function handleScannedAccount(addr: string){\n        // Fires after successful scan of addr\n        await xferAsset(props.sw.wallet, props.activeConfig, addr, createdId)\n\n        setCreatedId(0)\n        setLoading(false)\n    }\n\n    async function mintAndCreate(){\n        // Create account\n        setLoading(true)\n        const acct = algosdk.generateAccount()\n        setImportingAccount(acct)\n    }\n\n    function cancelCreate() { \n        setLoading(false)\n        setImportingAccount(undefined) \n    }\n\n    async function continueCreate() {\n        // Create ASA\n        const result = await NFT.create(props.sw.wallet, props.activeConfig,  md, cid)\n        setNFT(result)\n        setPopupOpen(true)\n    }\n\n    async function fundIt(){\n        // User has scanned it, issue grouped transactions\n        setFundLoading(true)\n        \n        await fundAccount(props.sw.wallet, props.activeConfig, importingAccount, nft.id())\n        // Unset\n        setImportingAccount(undefined)\n        setFundLoading(false)\n        setLoading(false)\n        window.location.href=\"/NFTBooth\"\n    }\n\n    return (\n        <div className='container'>\n            <NFTCard loading={loading} cid={cid} md={md} mintOnly={mintOnly} mintAndCreate={mintAndCreate}></NFTCard>\n            <AccountImporter importingAccount={importingAccount} cancelCreate={cancelCreate} continueCreate={continueCreate}/>\n            <AddressReader  optIn={createdId} handleScanned={handleScannedAccount}></AddressReader>\n            <Dialog isOpen={popupOpen} >\n                <div className={DIALOG_BODY}>\n                    <div className='container'>\n                        <Button loading={fundLoading} intent='success' onClick={fundIt}>Fund it!</Button>\n                    </div>\n                </div>\n            </Dialog>\n        </div>\n    )\n}\n\ninterface NFTCardProps {\n    cid: string\n    md: Metadata\n    loading: boolean\n    mintOnly()\n    mintAndCreate()\n}\n\nfunction NFTCard(props: NFTCardProps) {\n    return (\n        <Card elevation={Elevation.THREE} >\n            <MediaDisplay \n                name={props.md.name}\n                title={props.md.title()}\n                mediaSrc={resolveProtocol(0, props.md.mediaURL())} \n                mimeType={props.md.mimeType()} \n            />\n            <div className='container'>\n                <Button loading={props.loading} icon='clean' intent='success' onClick={props.mintAndCreate}>Mint</Button>\n            </div>\n        </Card>\n    )\n}\n\ninterface AccountImporterProps {\n    importingAccount: algosdk.Account \n    continueCreate()\n    cancelCreate()\n}\n\nfunction AccountImporter(props: AccountImporterProps) {\n    const [isOpen, setIsOpen] = React.useState(false)\n    const [mn, setMn]  = React.useState(\"\")\n\n    const ic = props.importingAccount\n    React.useEffect(()=>{\n        if(ic !== undefined){\n            setMn(JSON.stringify({\n                \"version\":\"1.0\", \n                \"mnemonic\":secretKeyToMnemonic(ic.sk)\n            }))\n            setIsOpen(true)\n        }\n    }, [ic])\n\n    function cancelCreate(){\n        setIsOpen(false)\n        props.cancelCreate()\n    }\n    function continueCreate(){\n        setIsOpen(false)\n        props.continueCreate()\n    }\n\n    return (\n        <Dialog isOpen={isOpen} className='content' >\n            <div className={DIALOG_BODY} >\n                <QRCode  value={mn} />\n            </div>\n            <div className={DIALOG_FOOTER} >\n                <div className='container'>\n                    <Button style={{margin:\"0px 10px\"}} intent='danger' onClick={cancelCreate}>Cancel</Button>\n                    <Button style={{margin:\"0px 10px\"}} intent='success' onClick={continueCreate}>Ready!</Button>\n                </div>\n            </div>\n        </Dialog>\n    )\n}\n\nexport interface AddressReaderProps {\n    optIn: number \n    handleScanned(addr: string): void\n}\n\nexport function AddressReader(props: AddressReaderProps) {\n    const vref = React.useRef<HTMLVideoElement>(null)\n    const [scanner, setScanner] = React.useState<QrScanner | undefined>(undefined)\n    const [isOpen, setIsOpen] = React.useState(false)\n\n    const open = props.optIn !== undefined && props.optIn>0\n    React.useEffect(()=>{\n        setIsOpen(open)\n        scanner?.stop()\n        scanner?.start()\n    }, [scanner, open])\n\n    let seen = \"\"\n    function initCam(){\n        function handleScanned(data: string){\n            if(seen === data) return\n\n            scanner?.stop()\n            vref.current = null\n            setScanner(undefined)\n            setIsOpen(false)\n            seen = data\n            props.handleScanned(data)\n        }\n\n        if(vref.current !== null && scanner === undefined)\n           setScanner(new QrScanner(vref.current,handleScanned))\n    }\n\n    return (\n        <Dialog isOpen={isOpen} onOpened={initCam}>\n            <div className={DIALOG_BODY}>\n                <h3>Please Opt into Asset ID {props.optIn}</h3>\n                <div className='scanner-container'>\n                    <video style={{width: '100%'}} ref={vref}></video>\n                </div>\n            </div>\n        </Dialog>\n    )\n}","\nimport { useParams } from 'react-router-dom'\nimport { Card, Elevation } from \"@blueprintjs/core\";\nimport React from \"react\";\nimport { NFT, resolveProtocol } from \"./lib/nft\"\nimport { getEventConfig } from \"./lib/config\"\nimport { MediaDisplay } from \"./MediaDisplay\";\n\ntype EventMintsProps = {\n    activeConfig: number;\n};\n\n\nexport default function EventMints(props: EventMintsProps) {\n    const [nfts, setNfts] = React.useState([])\n    const [loadedName, setLoadedName] = React.useState(undefined)\n    const { name } = useParams()\n\n\n\n    React.useEffect(() => {\n        if (nfts.length > 0 && loadedName === name) return;\n\n        const ec = getEventConfig(name)\n\n        const nftPromises = []\n        for (const asa of ec.asaList) {\n            nftPromises.push(NFT.fromAssetId(props.activeConfig, asa))\n        }\n        Promise.all(nftPromises).then((n) => {\n            setNfts(n)\n            setLoadedName(name)\n        })\n    })\n\n    const nftList = nfts.length === 0 || name !== loadedName ? [<h1 key='loading'>Loading...</h1>] : nfts.map((nft: NFT) => {\n        return (\n            <Card\n                key={nft.id()}\n                className=\"content-collection-item\"\n                elevation={Elevation.TWO}\n            >\n                <MediaDisplay\n                    title={nft.metadata.title()}\n                    name={nft.name()}\n                    mediaSrc={resolveProtocol(props.activeConfig, nft.metadata.mediaURL())}\n                    mimeType={nft.metadata.mimeType()}\n                />\n            </Card>\n        )\n    })\n\n    return (\n        <div className='container'>\n            {nftList}\n        </div>\n    )\n}\n","import * as React from 'react'\n\nimport { SessionWallet, allowedWallets } from 'algorand-session-wallet'\n\nimport { Dialog, Button, Classes, HTMLSelect, Intent } from '@blueprintjs/core'\nimport { IconName } from '@blueprintjs/icons'\n\n\ntype AlgorandWalletConnectorProps = {\n    darkMode: boolean\n    connected: boolean\n    accts: string[]\n    sessionWallet: SessionWallet\n    updateWallet(sw: SessionWallet): void\n}\n\nexport default function AlgorandWalletConnector(props:AlgorandWalletConnectorProps)  {\n\n    const [selectorOpen, setSelectorOpen] = React.useState(false)\n\n    const {sessionWallet,updateWallet} = props\n    React.useEffect(()=>{\n        if(sessionWallet.connected()) return\n\n        let interval: any\n        sessionWallet.connect().then((success)=>{\n            if(!success) return\n\n            // Check every 500ms to see if we've connected then kill the interval\n            // This is most useful in the case of walletconnect where it may be several \n            // seconds before the user connects\n            interval = setInterval(()=>{\n                if(sessionWallet.connected()) {\n                    clearInterval(interval)\n                    updateWallet(sessionWallet)\n                }\n            }, 500)\n\n        })\n\n        return ()=>{ clearInterval(interval) }\n\n    }, [sessionWallet, updateWallet])\n\n\n    function disconnectWallet() { \n        props.sessionWallet.disconnect()\n        props.updateWallet(new SessionWallet(props.sessionWallet.network, props.sessionWallet.permissionCallback)) \n    }\n\n    function handleDisplayWalletSelection() { setSelectorOpen(true) }\n\n    async function handleSelectedWallet(e: any) {\n        const choice = e.currentTarget.id\n\n        if(!(choice in allowedWallets)) {\n            if(props.sessionWallet.wallet !== undefined) props.sessionWallet.disconnect()\n            return setSelectorOpen(false)\n        }\n\n        const sw = new SessionWallet(props.sessionWallet.network, props.sessionWallet.permissionCallback, choice)\n\n        if(!await sw.connect()) {\n            sw.disconnect()\n        }\n\n        props.updateWallet(sw)\n\n        setSelectorOpen(false)\n    }\n\n    function handleChangeAccount(e: any) {\n        props.sessionWallet.setAccountIndex(parseInt(e.target.value))\n        props.updateWallet(props.sessionWallet)\n    }\n\n    const walletOptions = []\n    for(const [k,v] of Object.entries(allowedWallets)){\n        walletOptions.push((\n        <li key={k}>\n            <Button id={k}\n                large={true} \n                fill={true} \n                minimal={true} \n                outlined={true} \n                onClick={handleSelectedWallet}\n                > \n                <div className='wallet-option'>\n                    <img alt='wallet-branding' className='wallet-branding' src={  v.img(props.darkMode)} />\n                    <h5>{v.displayName()}</h5>\n                </div>\n                </Button>\n        </li>\n        ))\n    }\n\n    if (!props.connected) return (\n        <div>\n            <Button\n                minimal={true}\n                rightIcon='selection'\n                intent='warning'\n                outlined={true}\n                onClick={handleDisplayWalletSelection}>Connect Wallet</Button>\n\n            <Dialog isOpen={selectorOpen} title='Select Wallet' onClose={handleSelectedWallet} >\n                <div className={Classes.DIALOG_BODY}>\n                    <ul className='wallet-option-list'>\n                        {walletOptions}\n                    </ul>\n                </div>\n            </Dialog>\n        </div>\n    )\n\n\n    const addr_list = props.accts.map((addr, idx) => {\n        return (<option value={idx} key={idx}> {addr.substr(0, 8)}...  </option>)\n    })\n\n    const iconprops = { \n        icon: 'symbol-circle' as IconName, \n        intent: 'success'  as Intent\n    }\n\n    return (\n        <div>\n            <HTMLSelect \n                onChange={handleChangeAccount} \n                minimal={true} \n                iconProps={iconprops} \n                defaultValue={props.sessionWallet.accountIndex()} >\n                {addr_list}\n            </HTMLSelect>\n            <Button icon='log-out' minimal={true} onClick={disconnectWallet} ></Button>\n        </div>\n    )\n}","import Picker from './Picker'\nimport './index.css';\nimport { Button, Alignment, Navbar } from '@blueprintjs/core';\nimport { SessionWallet } from 'algorand-session-wallet';\nimport {Uploader} from './Uploader'\nimport React from 'react';\nimport {Minter} from './Minter';\nimport EventMints from './EventMints';\nimport AlgorandWalletConnector from './AlgorandWalletConnector'\nimport { conf, sessionGetActiveConf, eventConfs } from './lib/config';\n\nimport {\n  Link,\n  Route,\n  Routes,\n} from 'react-router-dom'\n\n\ntype AppProps = {\n  history: any,\n}\n\nfunction App(props: AppProps) {\n\n  const activeConf = sessionGetActiveConf()\n  const sw = new SessionWallet(conf[activeConf].network)\n\n\n  const [sessionWallet, setSessionWallet] =  React.useState(sw)\n  const [accts, setAccounts] = React.useState(sw.accountList())\n  const [connected, setConnected] = React.useState(sw.connected())\n\n  function updateWallet(sw: SessionWallet){ \n    setSessionWallet(sw)\n    setAccounts(sw.accountList())\n    setConnected(sw.connected())\n  }\n\n  const events = eventConfs.map((ec)=>{\n    return <Link key={ec.event} to={'/event/'+ec.event}><Button icon='folder-open' minimal={true}>{ec.title}</Button></Link>\n  }) \n\n  return (\n      <div className=\"App\">\n        <Navbar>\n        <Navbar.Group align={Alignment.LEFT}>\n          <Navbar.Heading>Algorand NFT Minter</Navbar.Heading>\n          <Navbar.Divider />\n          <Link to='/'><Button minimal={true} icon='search'>Choose</Button></Link>\n          <Link to='/upload'><Button minimal={true} icon='upload'>Upload</Button></Link>\n        </Navbar.Group>\n        <Navbar.Group align={Alignment.LEFT}>\n          <Navbar.Divider />\n          {events}\n        </Navbar.Group>\n        <Navbar.Group  align={Alignment.RIGHT}>\n          <AlgorandWalletConnector  \n            darkMode={false}\n            sessionWallet={sessionWallet}\n            accts={accts}\n            connected={connected} \n            updateWallet={updateWallet}\n          />\n        </Navbar.Group>\n        </Navbar>\n        <Routes>\n          <Route path=\"/\" element={<Picker  activeConfig={activeConf} sw={sessionWallet}></Picker>} />\n          <Route path=\"/mint/:cid\" element={ <Minter  activeConfig={activeConf} sw={sessionWallet}></Minter> }/>\n          <Route path=\"/upload\" element={ <Uploader  activeConfig={activeConf} ></Uploader> }/>\n          <Route path=\"/event/:name\" element={ <EventMints  activeConfig={activeConf} ></EventMints> }/>\n        </Routes>\n      </div>\n  );\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\n\nimport { HashRouter as Router } from 'react-router-dom';\nimport {createBrowserHistory} from \"history\"\n\nconst history = createBrowserHistory();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router >\n      <App history={history}  />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);","import { Wallet } from \"algorand-session-wallet\";\nimport algosdk, {\n  Algodv2,\n  waitForConfirmation,\n  makeAssetCreateTxnWithSuggestedParamsFromObject,\n  makeAssetTransferTxnWithSuggestedParamsFromObject,\n  makePaymentTxnWithSuggestedParamsFromObject,\n} from \"algosdk\";\nimport { NFT } from \"./nft\";\nimport { Metadata } from \"./metadata\";\nimport { conf } from \"./config\";\n\nfunction getClient(activeConf: number): Algodv2 {\n  return new algosdk.Algodv2(\"\", conf[activeConf].algod, \"\");\n}\n\nexport async function createToken(\n  wallet: Wallet,\n  activeConf: number,\n  url: string,\n  md: Metadata\n): Promise<number> {\n  const addr = wallet.getDefaultAccount();\n  const suggested = await getSuggested(activeConf, 1000);\n\n  const create_txn = makeAssetCreateTxnWithSuggestedParamsFromObject({\n    from: addr,\n    assetName: md.name,\n    unitName: md.unitName,\n    assetURL: url,\n    assetMetadataHash: md.toHash(),\n    manager: addr,\n    total: 1,\n    decimals: 0,\n    defaultFrozen: false,\n    suggestedParams: suggested,\n  });\n\n  const [create_txn_s]  = await wallet.signTxn([create_txn])\n  const result = await sendWait(activeConf, [create_txn_s])\n  return result['asset-index']\n}\n\nexport async function fundAccount(\n  wallet: Wallet,\n  activeConf: number,\n  acct: algosdk.Account,\n  id: number\n) {\n  const addr = wallet.getDefaultAccount();\n  const suggested = await getSuggested(activeConf, 100);\n\n  const fund_txn = makePaymentTxnWithSuggestedParamsFromObject({\n    from: addr,\n    to: acct.addr,\n    amount: 3e5,\n    suggestedParams: suggested,\n  });\n\n  const optin_txn = makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: acct.addr,\n    to: acct.addr,\n    assetIndex: id,\n    amount: 0,\n    suggestedParams: suggested,\n  });\n\n  const xfer_txn = makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: addr,\n    to: acct.addr,\n    assetIndex: id,\n    amount: 1,\n    suggestedParams: suggested,\n  });\n\n\n  const grouped = [fund_txn, optin_txn, xfer_txn];\n  algosdk.assignGroupID(grouped);\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [fund_txn_s, _, xfer_txn_s] = await wallet.signTxn(grouped);\n  const optin_txn_s = algosdk.signTransaction(optin_txn, acct.sk);\n  await sendWait(activeConf, [fund_txn_s, optin_txn_s, xfer_txn_s]);\n}\n\nexport async function xferAsset(\n  wallet: Wallet,\n  activeConf: number,\n  rx: string,\n  id: number\n) {\n  const addr = wallet.getDefaultAccount();\n  const suggested = await getSuggested(activeConf, 100);\n\n  const xfer_txn = makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: addr,\n    to: rx,\n    assetIndex: id,\n    amount: 1,\n    suggestedParams: suggested,\n  });\n\n  const [create_txn_s] = await wallet.signTxn([xfer_txn]);\n  await sendWait(activeConf, [create_txn_s]);\n}\n\nexport async function getSuggested(activeConf: number, rounds: number) {\n  const txParams = await getClient(activeConf).getTransactionParams().do();\n  return { ...txParams, lastRound: txParams[\"firstRound\"] + rounds };\n}\n\nexport async function getToken(\n  activeConf: number,\n  assetId: number\n): Promise<any> {\n  return await getClient(activeConf).getAssetByID(assetId).do();\n}\n\nexport async function getCollection(\n  activeConf: number,\n  address: string\n): Promise<any[]> {\n  const results = await getClient(activeConf).accountInformation(address).do();\n\n  const plist = [];\n  for (const a in results[\"assets\"]) {\n    if (results[\"assets\"][a][\"amount\"] > 0)\n      plist.push(getToken(activeConf, results[\"assets\"][a][\"asset-id\"]));\n  }\n\n  const assets = await Promise.all(plist);\n  const collectionRequests = assets.map((a) => {\n    return NFT.fromToken(activeConf, a);\n  });\n  return Promise.all(collectionRequests);\n}\n\nexport async function sendWait(\n  activeConf: number,\n  signed: any[]\n): Promise<any> {\n  const client = getClient(activeConf);\n  try {\n    const { txId } = await client\n      .sendRawTransaction( signed.map((t) => { return t.blob; }))\n      .do();\n    const result = await waitForConfirmation(client, txId, 3);\n    return result;\n  } catch (error) {\n    console.error(error);\n  }\n\n  return undefined;\n}"],"sourceRoot":""}